// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Masjid {
  id          String  @id @default(cuid())
  name        String
  description String
  address     String?
  city        String
  postal      String
  country     String
  email       String
  websiteUrl  String
  phone       String
  googleCalendarId  String @default("")
  googleCalendarCredentials Json?
  googleCalendarPfp String?

  latitude        String
  longitude       String
  locationAddress String

  logo String @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSIC25nqru3yN9lhtoTwdBWt_u0QlOcPzw3Bw&s")

  timezone  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  prayerTimes PrayerTime[]
  users       User[]       @relation("MasjidUsers")
  devices     Device[]
  themes      Theme[]
  flyers      Flyer[]
  events      Event[]
  iqamahTimings IqamahTiming[]
  prayerCalculation PrayerCalculation[]
}

model Device {
  id       String @id @default(cuid())
  masjidId String
  masjid   Masjid @relation(fields: [masjidId], references: [id])

  name         String
  location     String?
  isActive     Boolean   @default(true)
  lastSeen     DateTime? // for heartbeat tracking
  registeredAt DateTime  @default(now())
  ipAddress    String?

  currentThemeId String?
  currentTheme   Theme?  @relation(fields: [currentThemeId], references: [id])

  screenLogs ScreenLog[]
}

model ScreenLog {
  id       String @id @default(cuid())
  deviceId String
  device   Device @relation(fields: [deviceId], references: [id])

  timestamp DateTime @default(now())
  action    String // 'boot', 'refresh', 'disconnect', etc.
  details   String?
}

model Theme {
  id       String @id @default(cuid())
  masjidId String
  masjid   Masjid @relation(fields: [masjidId], references: [id])

  name       String
  configJson Json // stores layout/colors/etc.
  createdAt  DateTime @default(now())

  devices Device[]
}

model PrayerTime {
  id          String   @id @default(cuid())
  masjidId    String
  date        DateTime
  fajr        DateTime
  sunrise     DateTime
  dhuhr       DateTime
  asr         DateTime
  maghrib     DateTime
  isha        DateTime
  isCalculated Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  month String
  year Int

  // Relation to Masjid
  masjid      Masjid   @relation(fields: [masjidId], references: [id])

  @@index([masjidId])
  @@index([date])
  @@unique([masjidId, date])
}

model Flyer {
  id       String @id @default(cuid())
  masjidId String
  masjid   Masjid @relation(fields: [masjidId], references: [id])

  title     String
  imageUrl  String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
}

model Products {
  id                     String   @id
  name                   String
  description            String
  features               String[]
  price                  Int
  requiredSubscriptionId String
  popular                Boolean  @default(false)
  image                  String   @default("placeholder.svg?height=200&width=300")
  category               String   @default("")
  role                   String   @default("subscription")
  url                    String   @default("")
}

model Event {
  id          String   @id @default(cuid())
  masjidId    String
  title       String
  date        DateTime
  timeStart   DateTime
  timeEnd     DateTime
  location    String
  description String
  type        String   // prayer, education, community, youth, etc.
  tagColor    String   // blue-500, green-500, purple-500, orange-500, gray-500
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
   
  // Google Calendar sync fields
  syncToGoogleCalendar Boolean @default(false)
  googleCalendarEventId String? // Stores the Google Calendar event ID for two-way sync
  lastSyncedAt DateTime? // Tracks when the event was last synced with Google Calendar
  syncStatus String? // Can be 'pending', 'synced', 'failed'
   
  masjid      Masjid   @relation(fields: [masjidId], references: [id])

  @@index([masjidId])
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  masjids       Masjid[]  @relation("MasjidUsers")
  admin         Boolean   @default(false)
  role          String    @default("user")

  MyMasjid         Masjid[]
  CheckoutSessions CheckoutSessions[]
  Orders           Orders[]
  MizanTv          MizanTv[]

  stripeCustomerId String?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model CheckoutSessions {
  id          String   @id
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId   String
  paymentType String
  completed   String
  cart        String
  createdAt   DateTime @default(now())
}

model Orders {
  id              String   @id
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSessionId String?
  status          String
  cart            String
  trackingNumber  String?
  createdAt       DateTime @default(now())

  MizanTv MizanTv[]
}

model MizanTv {
  id         String @id
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId    String
  order      Orders @relation(fields: [orderId], references: [id], onDelete: Cascade)
  accessCode String
}

model PrayerCalculation {
  id                   String   @id @default(cuid())
  masjidId             String
  masjid               Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  calculationMethod    String   // ISNA, MWL, Karachi, Makkah, Egypt, Custom
  asrMethod            String   // Standard, Hanafi
  higherLatitudeMethod String   // None, MiddleOfNight, SeventhOfNight, TwilightAngle
  fajrOffset           Int
  sunriseOffset        Int
  dhuhrOffset          Int
  asrOffset            Int
  maghribOffset        Int
  ishaOffset           Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt @default(now())
}

model IqamahTiming {
  id          String   @id @default(cuid())
  masjidId    String
  masjid      Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  changeDate  DateTime
  fajr        String
  dhuhr       String
  asr         String
  maghrib     String
  maghribType String
  maghribOffset String
  isha        String
  jumuahI     String?
  jumuahII    String?
  jumuahIII   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

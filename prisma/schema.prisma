generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Masjid {
  id                        String              @id @default(cuid())
  name                      String
  description               String
  address                   String?
  city                      String
  postal                    String
  country                   String
  email                     String
  websiteUrl                String
  phone                     String
  googleCalendarId          String              @default("")
  googleCalendarCredentials Json?
  googleCalendarPfp         String?
  latitude                  String
  longitude                 String
  locationAddress           String
  logo                      String              @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSIC25nqru3yN9lhtoTwdBWt_u0QlOcPzw3Bw&s")
  timezone                  String
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  ownerId                   String
  announcements             Announcement[]
  contents                  Content[]
  devices                   Device[]
  donations                 Donation[]
  donationCategories        DonationCategory[]
  events                    Event[]
  flyers                    Flyer[]
  iqamahTimings             IqamahTiming[]
  kioskInstances            KioskInstance[]
  owner                     User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  masjidInvites             MasjidInvite[]      @relation("MasjidInviteToMasjid")
  masjidProducts            MasjidProduct[]
  Orders                    Orders[]
  prayerCalculation         PrayerCalculation[]
  prayerTimes               PrayerTime[]
  SignageConfig             SignageConfig[]
  tvDisplays                TVDisplay[]
  themes                    Theme[]
  users                     User[]              @relation("MasjidUsers")
}

model Device {
  id             String      @id @default(cuid())
  masjidId       String
  name           String
  location       String?
  isActive       Boolean     @default(true)
  lastSeen       DateTime?
  registeredAt   DateTime    @default(now())
  ipAddress      String?
  currentThemeId String?
  currentTheme   Theme?      @relation(fields: [currentThemeId], references: [id], onDelete: Cascade)
  masjid         Masjid      @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  screenLogs     ScreenLog[]
}

model ScreenLog {
  id        String   @id @default(cuid())
  deviceId  String
  timestamp DateTime @default(now())
  action    String
  details   String?
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model Theme {
  id         String   @id @default(cuid())
  masjidId   String
  name       String
  configJson Json
  createdAt  DateTime @default(now())
  devices    Device[]
  masjid     Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)
}

model PrayerTime {
  id           String   @id @default(cuid())
  masjidId     String
  date         DateTime
  fajr         DateTime
  sunrise      DateTime
  dhuhr        DateTime
  asr          DateTime
  maghrib      DateTime
  isha         DateTime
  isCalculated Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  month        String
  year         Int
  masjid       Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)

  @@unique([masjidId, date])
  @@index([masjidId])
  @@index([date])
}

model Flyer {
  id        String   @id @default(cuid())
  masjidId  String
  title     String
  imageUrl  String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  masjid    Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)
}

model Product {
  id                     String          @id @default(cuid())
  name                   String
  description            String
  features               String[]
  price                  Int
  image                  String          @default("placeholder.svg?height=200&width=300")
  category               String          @default("")
  type                   String          @default("kiosk")
  url                    String          @default("")
  popular                Boolean         @default(false)
  stripeProductId        String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  discountType           DiscountType?
  discountValue          Int?
  discountStart          DateTime?
  discountEnd            DateTime?
  requiredSubscriptionId String?
  meta_data              Json?
  kioskInstances         KioskInstance[]
  masjids                MasjidProduct[]
  images                 ProductImage[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model MasjidProduct {
  id         String   @id @default(cuid())
  masjidId   String
  productId  String
  assignedAt DateTime @default(now())
  masjid     Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([masjidId, productId])
}

model Event {
  id                    String    @id @default(cuid())
  title                 String
  date                  DateTime
  timeStart             DateTime
  timeEnd               DateTime
  location              String
  description           String
  type                  String
  tagColor              String
  masjidId              String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  syncToGoogleCalendar  Boolean   @default(false)
  googleCalendarEventId String?
  lastSyncedAt          DateTime?
  syncStatus            String?
  flyerUrl              String?
  tvFlyerUrl            String?
  recurrence            Json?
  masjid                Masjid    @relation(fields: [masjidId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id
  name             String
  email            String             @unique
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  admin            Boolean            @default(false)
  role             String             @default("user")
  stripeCustomerId String?
  CheckoutSessions CheckoutSessions[]
  MyMasjid         Masjid[]
  masjidInvitedTo  MasjidInvite[]     @relation("MasjidInvitedToUser")
  masjidInvites    MasjidInvite[]     @relation("MasjidInviteToUser")
  MizanTv          MizanTv[]
  Orders           Orders[]
  systemLogs       SystemLog[]
  accounts         Account[]
  sessions         Session[]
  masjids          Masjid[]           @relation("MasjidUsers")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model CheckoutSessions {
  id           String   @id
  userId       String
  sessionId    String
  paymentType  String
  completed    String
  cart         String
  createdAt    DateTime @default(now())
  shippingData Json?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Orders {
  id              String          @id
  userId          String
  stripeSessionId String?
  status          String
  cart            String
  trackingNumber  String?
  createdAt       DateTime        @default(now())
  masjidId        String?
  meta_data       Json?
  KioskInstance   KioskInstance[]
  MizanTv         MizanTv[]
  masjid          Masjid?         @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  TVDisplay       TVDisplay[]
}

model MizanTv {
  id         String @id
  userId     String
  orderId    String
  accessCode String
  order      Orders @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PrayerCalculation {
  id                   String   @id @default(cuid())
  masjidId             String
  calculationMethod    String
  asrMethod            String
  higherLatitudeMethod String
  fajrOffset           Int
  sunriseOffset        Int
  dhuhrOffset          Int
  asrOffset            Int
  maghribOffset        Int
  ishaOffset           Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt
  masjid               Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)
}

model IqamahTiming {
  id            String   @id @default(cuid())
  masjidId      String
  changeDate    DateTime
  fajr          String
  dhuhr         String
  asr           String
  maghrib       String
  maghribType   String
  maghribOffset String
  isha          String
  jumuahI       String?
  jumuahII      String?
  jumuahIII     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  masjid        Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)
}

model KioskInstance {
  id            String     @id @default(cuid())
  productId     String
  masjidId      String
  serial        String     @unique
  activatedAt   DateTime   @default(now())
  status        String     @default("active")
  config        Json?
  kioskName     String?
  kioskLocation String?
  orderId       String
  donations     Donation[]
  masjid        Masjid     @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  orders        Orders     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DonationCategory {
  id                    String     @id @default(cuid())
  name                  String
  description           String?
  color                 String     @default("#550C18")
  icon                  String?
  defaultAmounts        String?
  min                   Int        @default(1)
  max                   Int        @default(10000)
  restricted            Boolean    @default(false)
  active                Boolean    @default(true)
  order                 Int        @default(0)
  masjidId              String
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  allowAnonymous        Boolean    @default(false)
  allowComments         Boolean    @default(false)
  allowCustomAmount     Boolean    @default(true)
  allowPledge           Boolean    @default(false)
  amountDonated         Int        @default(0)
  amountsPerInterval    Json?
  appreciation          String?
  collectAddress        Boolean    @default(false)
  collectPhone          Boolean    @default(false)
  complianceText        String?
  coverFee              Boolean    @default(false)
  coverFeeDefault       Boolean    @default(false)
  ctaMessage            String?
  customLabel           String?
  defaultInterval       String?
  designations          String[]
  enableAppleGooglePay  Boolean    @default(false)
  enforceMax            Boolean    @default(false)
  excludeFromReceipts   Boolean    @default(false)
  featured              Boolean    @default(false)
  featuredImage         String?
  goalAmount            Int?
  headerBgColor         String?
  hideTitle             Boolean    @default(false)
  intervals             String[]
  logo                  String?
  mailingListOptIn      Boolean    @default(false)
  quickDonate           Boolean    @default(false)
  recurringCountOptions Int[]
  redirectUrl           String?
  showLogo              Boolean    @default(true)
  showOnKiosk           Boolean    @default(true)
  subtitle              String?
  donations             Donation[]
  masjid                Masjid     @relation(fields: [masjidId], references: [id], onDelete: Cascade)
}

model Donation {
  id              String           @id @default(cuid())
  amount          Int
  donorName       String?
  donorEmail      String?
  masjidId        String
  categoryId      String
  kioskInstanceId String?
  status          String           @default("pending")
  paymentMethod   String
  transactionId   String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  category        DonationCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  kioskInstance   KioskInstance?   @relation(fields: [kioskInstanceId], references: [id], onDelete: Cascade)
  masjid          Masjid           @relation(fields: [masjidId], references: [id], onDelete: Cascade)
}

model TVDisplay {
  id                String         @id @default(cuid())
  masjidId          String
  name              String
  location          String?
  isActive          Boolean        @default(true)
  lastSeen          DateTime?
  ipAddress         String?
  status            String         @default("offline")
  layout            String?
  config            Json?
  assignedContentId String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  code              String?
  orderId           String?
  assignedContent   Content?       @relation("AssignedContent", fields: [assignedContentId], references: [id], onDelete: Cascade)
  masjid            Masjid         @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  Orders            Orders?        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  announcements     Announcement[] @relation("AnnouncementToTVDisplay")
  displayedContent  Content[]      @relation("DisplayContent")
}

model Content {
  id                 String         @id @default(cuid())
  masjidId           String
  title              String
  description        String
  type               ContentType
  url                String?
  data               Json?
  startDate          DateTime?
  endDate            DateTime?
  startTime          String?
  endTime            String?
  duration           String?
  dayType            String?
  timeType           String?
  zones              String
  active             Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  displayLocations   String[]
  fullscreen         Boolean
  announcements      Announcement[]
  masjid             Masjid         @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  assignedToDisplays TVDisplay[]    @relation("AssignedContent")
  displays           TVDisplay[]    @relation("DisplayContent")
}

model Announcement {
  id               String      @id @default(cuid())
  masjidId         String
  title            String
  content          String
  type             String
  fullscreen       Boolean     @default(true)
  startDate        DateTime
  endDate          DateTime
  zones            String
  active           Boolean     @default(true)
  createdAt        DateTime    @default(now())
  displayLocations String[]
  updatedAt        DateTime    @updatedAt
  contentItemId    String?
  contentItem      Content?    @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  masjid           Masjid      @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  displays         TVDisplay[] @relation("AnnouncementToTVDisplay")
}

model MasjidInvite {
  id          String    @id @default(cuid())
  masjidId    String
  userId      String
  invitedById String
  status      String    @default("pending")
  token       String
  expiresAt   DateTime
  joinDate    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  invitedBy   User      @relation("MasjidInvitedToUser", fields: [invitedById], references: [id], onDelete: Cascade)
  masjid      Masjid    @relation("MasjidInviteToMasjid", fields: [masjidId], references: [id], onDelete: Cascade)
  user        User      @relation("MasjidInviteToUser", fields: [userId], references: [id], onDelete: Cascade)
}

model SystemLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  userId     String
  details    String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

model SignageConfig {
  id        String   @id @default(cuid())
  masjidId  String
  displayId String?
  config    Json
  updatedAt DateTime @updatedAt
  masjid    Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  @@unique([masjidId, displayId])
}

enum DiscountType {
  percentage
  fixed
}

enum ContentType {
  image
  video
  countdown
  announcement
  website
  predesigned
  google_calendar
  daily_verse
  daily_hadith
  daily_dua
  ramadan_countdown
  eid_countdown
  days_countdown
  taraweeh_timings
  iqamah_timings
}

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Masjid {
  id          String  @id @default(cuid())
  name        String
  description String
  address     String?
  city        String
  postal      String
  country     String
  email       String
  websiteUrl  String
  phone       String
  googleCalendarId  String @default("")
  googleCalendarCredentials Json?
  googleCalendarPfp String?

  latitude        String
  longitude       String
  locationAddress String

  logo String @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSIC25nqru3yN9lhtoTwdBWt_u0QlOcPzw3Bw&s")

  timezone  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  prayerTimes PrayerTime[]
  users       User[]       @relation("MasjidUsers")
  devices     Device[]
  themes      Theme[]
  flyers      Flyer[]
  events      Event[]
  iqamahTimings IqamahTiming[]
  prayerCalculation PrayerCalculation[]
  masjidProducts MasjidProduct[]
  kioskInstances KioskInstance[]
  donationCategories DonationCategory[]
  donations Donation[]
  tvDisplays TVDisplay[]
  contents Content[]
  announcements Announcement[]
}

model Device {
  id       String @id @default(cuid())
  masjidId String
  masjid   Masjid @relation(fields: [masjidId], references: [id])

  name         String
  location     String?
  isActive     Boolean   @default(true)
  lastSeen     DateTime? // for heartbeat tracking
  registeredAt DateTime  @default(now())
  ipAddress    String?

  currentThemeId String?
  currentTheme   Theme?  @relation(fields: [currentThemeId], references: [id])

  screenLogs ScreenLog[]
}

model ScreenLog {
  id       String @id @default(cuid())
  deviceId String
  device   Device @relation(fields: [deviceId], references: [id])

  timestamp DateTime @default(now())
  action    String // 'boot', 'refresh', 'disconnect', etc.
  details   String?
}

model Theme {
  id       String @id @default(cuid())
  masjidId String
  masjid   Masjid @relation(fields: [masjidId], references: [id])

  name       String
  configJson Json // stores layout/colors/etc.
  createdAt  DateTime @default(now())

  devices Device[]
}

model PrayerTime {
  id          String   @id @default(cuid())
  masjidId    String
  date        DateTime
  fajr        DateTime
  sunrise     DateTime
  dhuhr       DateTime
  asr         DateTime
  maghrib     DateTime
  isha        DateTime
  isCalculated Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  month String
  year Int

  // Relation to Masjid
  masjid      Masjid   @relation(fields: [masjidId], references: [id])

  @@index([masjidId])
  @@index([date])
  @@unique([masjidId, date])
}

model Flyer {
  id       String @id @default(cuid())
  masjidId String
  masjid   Masjid @relation(fields: [masjidId], references: [id])

  title     String
  imageUrl  String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
}

model Product {
  id              String   @id @default(cuid())
  name            String
  description     String
  features        String[]
  price           Int
  image           String   @default("placeholder.svg?height=200&width=300")
  category        String   @default("")
  type            String   @default("kiosk") // "kiosk", "service", "physical"
  url             String   @default("")
  popular         Boolean  @default(false)
  stripeProductId String?  // For Stripe integration
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Discount fields
  discountType    DiscountType? // "percentage" or "fixed"
  discountValue   Int?          // Value of the discount
  discountStart   DateTime?
  discountEnd     DateTime?

  masjids         MasjidProduct[]
  images          ProductImage[]
  kioskInstances KioskInstance[]
}

enum DiscountType {
  percentage
  fixed
}

model ProductImage {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  url       String
  alt       String?
  order     Int      @default(0)
}

model MasjidProduct {
  id         String   @id @default(cuid())
  masjid     Masjid   @relation(fields: [masjidId], references: [id])
  masjidId   String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  assignedAt DateTime @default(now())

  @@unique([masjidId, productId])
}

model Event {
  id                    String   @id @default(cuid())
  title                 String
  date                  DateTime
  timeStart             DateTime
  timeEnd               DateTime
  location              String
  description           String
  type                  String
  tagColor              String
  masjidId              String
  masjid                Masjid   @relation(fields: [masjidId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  syncToGoogleCalendar  Boolean  @default(false)
  googleCalendarEventId String?
  lastSyncedAt          DateTime?
  syncStatus            String?
  flyerUrl              String?
  tvFlyerUrl            String?
  recurrence            Json?
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  masjids       Masjid[]  @relation("MasjidUsers")
  admin         Boolean   @default(false)
  role          String    @default("user")

  MyMasjid         Masjid[]
  CheckoutSessions CheckoutSessions[]
  Orders           Orders[]
  MizanTv          MizanTv[]

  stripeCustomerId String?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model CheckoutSessions {
  id          String   @id
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId   String
  paymentType String
  completed   String
  cart        String
  createdAt   DateTime @default(now())
}

model Orders {
  id              String   @id
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSessionId String?
  status          String
  cart            String
  trackingNumber  String?
  createdAt       DateTime @default(now())

  MizanTv MizanTv[]
}

model MizanTv {
  id         String @id
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId    String
  order      Orders @relation(fields: [orderId], references: [id], onDelete: Cascade)
  accessCode String
}

model PrayerCalculation {
  id                   String   @id @default(cuid())
  masjidId             String
  masjid               Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  calculationMethod    String   // ISNA, MWL, Karachi, Makkah, Egypt, Custom
  asrMethod            String   // Standard, Hanafi
  higherLatitudeMethod String   // None, MiddleOfNight, SeventhOfNight, TwilightAngle
  fajrOffset           Int
  sunriseOffset        Int
  dhuhrOffset          Int
  asrOffset            Int
  maghribOffset        Int
  ishaOffset           Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt @default(now())
}

model IqamahTiming {
  id          String   @id @default(cuid())
  masjidId    String
  masjid      Masjid   @relation(fields: [masjidId], references: [id], onDelete: Cascade)
  changeDate  DateTime
  fajr        String
  dhuhr       String
  asr         String
  maghrib     String
  maghribType String
  maghribOffset String
  isha        String
  jumuahI     String?
  jumuahII    String?
  jumuahIII   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model KioskInstance {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  masjidId    String
  masjid      Masjid   @relation(fields: [masjidId], references: [id])
  serial      String   @unique
  activatedAt DateTime @default(now())
  status      String   @default("active")
  config      Json?
  kioskName   String?
  kioskLocation String?
  donations   Donation[]
}

model DonationCategory {
  id             String   @id @default(cuid())
  name           String
  description    String?
  subtitle       String?
  color          String @default("#550C18")
  icon           String?
  logo           String?
  featured       Boolean @default(false)
  featuredImage  String?
  showOnKiosk    Boolean @default(true)
  excludeFromReceipts Boolean @default(false)
  allowPledge    Boolean @default(false)
  quickDonate    Boolean @default(false)
  hideTitle      Boolean @default(false)
  showLogo       Boolean @default(true)
  headerBgColor  String?
  allowComments  Boolean @default(false)
  goalAmount     Int?
  enableAppleGooglePay Boolean @default(false)
  intervals      String[]
  defaultAmounts String?
  defaultInterval String?
  recurringCountOptions Int[]
  ctaMessage     String?
  designations   String[]
  amountsPerInterval Json?
  allowCustomAmount Boolean @default(true)
  min            Int @default(1)
  max            Int @default(10000)
  enforceMax     Boolean @default(false)
  coverFee       Boolean @default(false)
  coverFeeDefault Boolean @default(false)
  customLabel    String?
  complianceText String?
  allowAnonymous Boolean @default(false)
  collectAddress Boolean @default(false)
  collectPhone   Boolean @default(false)
  mailingListOptIn Boolean @default(false)
  appreciation   String?
  redirectUrl    String?
  restricted     Boolean @default(false)
  active         Boolean @default(true)
  order          Int @default(0)
  masjidId       String
  masjid         Masjid @relation(fields: [masjidId], references: [id])

  amountDonated  Int @default(0)
  donations      Donation[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Donation {
  id              String   @id @default(cuid())
  amount          Int
  donorName       String?
  donorEmail      String?
  masjidId        String
  masjid          Masjid   @relation(fields: [masjidId], references: [id])
  categoryId      String
  category        DonationCategory @relation(fields: [categoryId], references: [id])
  kioskInstanceId String?
  kioskInstance   KioskInstance? @relation(fields: [kioskInstanceId], references: [id])
  status          String   @default("pending") // e.g. pending, completed, failed
  paymentMethod   String   // e.g. card, cash, stripe
  transactionId   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TVDisplay {
  id          String   @id @default(cuid())
  masjidId    String
  masjid      Masjid   @relation(fields: [masjidId], references: [id])
  name        String
  location    String?
  isActive    Boolean  @default(true)
  lastSeen    DateTime?
  ipAddress   String?
  status      String   @default("offline") // online, offline, error
  layout      String?  // Layout/theme for this display
  config      Json?
  assignedContentId String?
  assignedContent   Content? @relation("AssignedContent", fields: [assignedContentId], references: [id])
  displayedContent  Content[] @relation("DisplayContent")
  announcements    Announcement[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Content {m
  id          String   @id @default(cuid())
  masjidId    String
  masjid      Masjid   @relation(fields: [masjidId], references: [id])
  title       String
  type        ContentType
  url         String? // for images, videos, etc.
  data        Json?   // for countdowns, text, etc.
  startDate   DateTime?
  endDate     DateTime?
  zones       String[] // e.g. ["All", "Zone1"]
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displays    TVDisplay[] @relation("DisplayContent")
  assignedToDisplays TVDisplay[] @relation("AssignedContent")
  announcements Announcement[]
}

enum ContentType {
  image
  video
  countdown
  announcement
  website
  predesigned
}

model Announcement {
  id          String   @id @default(cuid())
  masjidId    String
  masjid      Masjid   @relation(fields: [masjidId], references: [id])
  title       String
  content     String
  type        String   // e.g. Announcement, Reminder
  startDate   DateTime
  endDate     DateTime
  zones       String[]
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displays    TVDisplay[]
  contentItem Content? @relation(fields: [contentItemId], references: [id])
  contentItemId String?
}